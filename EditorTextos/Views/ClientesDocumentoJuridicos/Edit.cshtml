@model EditorTextos.Models.ClientesDocumentoJuridicos

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>ClientesDocumentoJuridicos</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.DocumentoTexto, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.DocumentoTexto, new { htmlAttributes = new { @class = "form-control", @id = "DocumentoTexto" } })
                @Html.ValidationMessageFor(model => model.DocumentoTexto, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Resumen, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Resumen, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Resumen, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ClientesId, "ClientesId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ClientesId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ClientesId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PlantillaDocumentosId, "PlantillaDocumentosId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("PlantillaDocumentosId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PlantillaDocumentosId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmpresasId, "EmpresasId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("EmpresasId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.EmpresasId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FechaCreacion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FechaCreacion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FechaCreacion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FechaActualizacion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FechaActualizacion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FechaActualizacion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://cdn.ckeditor.com/4.10.0/standard-all/ckeditor.js"></script>
    <script>
        var _objCliente = @Html.Raw(ViewBag._jsonDatos);
        var PLACEHOLDERS = [];

        for (var i in _objCliente) {
            if (_objCliente.hasOwnProperty(i)) {
                PLACEHOLDERS.push(_objCliente[i]);
            }
        }


        CKEDITOR.replace('DocumentoTexto', {
            plugins: 'autocomplete,textmatch,toolbar,wysiwygarea,basicstyles,undo,placeholder,justify,font,tableresize',

            on: {
                instanceReady: function (evt) {
                    var itemTemplate = '<li data-id="{id}">' +
                        '<div><strong class="item-title">{name}</strong></div>' +
                        '<div><i>{value}</i></div>' + '<div><i>{description}</i></div>' +
                        '</li>',
                        outputTemplate = '[[{name}]]<span>&nbsp;</span>';

                    var autocomplete = new CKEDITOR.plugins.autocomplete(evt.editor, {
                        textTestCallback: textTestCallback,
                        dataCallback: dataCallback,
                        itemTemplate: itemTemplate,
                        outputTemplate: outputTemplate
                    });

                    // Override default getHtmlToInsert to enable rich content output.
                    autocomplete.getHtmlToInsert = function (item) {
                        return this.outputTemplate.output(item);
                    }
                }
            }
        }).then(editor => {
            theEditor = editor;
        })
            .catch(error => {
                console.error(error);
            });

        function textTestCallback(range) {
            if (!range.collapsed) {
                return null;
            }

            return CKEDITOR.plugins.textMatch.match(range, matchCallback);
        }

        function matchCallback(text, offset) {
            var pattern = /\[{2}([A-z]|\])*$/,
                match = text.slice(0, offset)
                    .match(pattern);

            if (!match) {
                return null;
            }

            return {
                start: match.index,
                end: offset
            };
        }

        function dataCallback(matchInfo, callback) {
            var data = PLACEHOLDERS.filter(function (item) {
                var itemName = '[[' + item.name.toLowerCase() + ']]';
                return itemName.indexOf(matchInfo.query.toLowerCase()) == 0;
            });

            callback(data);
        }
    </script>
}
